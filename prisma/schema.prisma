generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Country {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  refugees Refugee[]

  @@map("countries")
}

model Language {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  refugees Refugee[]

  @@map("languages")
}

model Owner {
  id       Int    @id @default(autoincrement())
  auth0_id String @unique @db.VarChar(255)
  email    String @db.VarChar(255)
  name     String @db.VarChar(255)
  phone    String @db.VarChar(255)

  locations Location[]
  @@map("owners")
}

model Provider {
  id       Int    @id @default(autoincrement())
  auth0_id String @unique @db.VarChar(255)
  email    String @db.VarChar(255)
  name     String @db.VarChar(255)
  phone    String @db.VarChar(255)

  services Service[]
  @@map("providers")
}

model Refugee {
  id          Int     @id @default(autoincrement())
  auth0_id    String  @unique @db.VarChar(255)
  phone       String? @db.VarChar(255)
  email       String? @db.VarChar(255)
  name        String  @db.VarChar(255)
  id_country  Int
  id_language Int
  no_adults   Int?    @default(1)
  no_children Int?    @default(0)
  notes       String  @db.VarChar(255)
  id_loc      Int?    @unique

  accommodation AccommodationRequest?

  country  Country   @relation(fields: [id_country], references: [id], onDelete: Cascade)
  language Language  @relation(fields: [id_language], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [id_loc], references: [id], onDelete: SetNull)
  @@map("refugees")
}

model Location {
  id       Int    @default(autoincrement())
  name     String @db.VarChar(255)
  address  String @unique @db.VarChar(255)
  id_owner Int

  refugee              Refugee?
  owner                Owner                  @relation(fields: [id_owner], references: [id], onDelete: Cascade)
  services             Service[]
  AccommodationRequest AccommodationRequest[]
  @@id([id, id_owner])
  @@map("locations")
}

model Service {
  id          Int          @default(autoincrement())
  id_loc      Int
  type        serviceTypes
  name        String       @db.VarChar(255)
  description String       @db.VarChar(255)
  id_provider Int

  provider Provider @relation(fields: [id_provider], references: [id], onDelete: Cascade)
  location Location @relation(fields: [id_loc], references: [id], onDelete: Cascade)

  @@id([id, id_loc, type, id_provider])
  @@map("services")
}

model AccommodationRequest {
  id         Int                @default(autoincrement())
  id_refugee Int                @unique
  status     requestStatusTypes @default(UNANSWERED)

  location Location @relation(fields: [locationId, locationId_owner], references: [id, id_owner])
  refugee  Refugee  @relation(fields: [id_refugee], references: [id], onDelete: Cascade)

  locationId       Int
  locationId_owner Int
  @@id([id, id_refugee])
  @@map("accommodationRequests")
}

enum serviceTypes {
  GENERIC
  FOOD
  CLOTHES
  MEDICAL_SERVICE
  TRANSLATION_SERVICE
  LEISURE
}

enum requestStatusTypes {
  UNANSWERED
  ACCEPTED
  DECLINED
}
